/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: container.proto */

#ifndef PROTOBUF_C_container_2eproto__INCLUDED
#define PROTOBUF_C_container_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _ContainerImageSize ContainerImageSize;
typedef struct _ContainerConfig ContainerConfig;
typedef struct _ContainerStatus ContainerStatus;


/* --- enums --- */

/*
 **
 * Type of container KVM|CONTAINER
 */
typedef enum _ContainerType {
  CONTAINER_TYPE__CONTAINER = 1,
  CONTAINER_TYPE__KVM = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CONTAINER_TYPE)
} ContainerType;
/*
 **
 * The various states that a container can be in.
 * TODO must be kept in sync with definition in container.h!
 */
typedef enum _ContainerState {
  CONTAINER_STATE__STOPPED = 1,
  CONTAINER_STATE__STARTING = 2,
  CONTAINER_STATE__BOOTING = 3,
  CONTAINER_STATE__RUNNING = 4,
  CONTAINER_STATE__FREEZING = 5,
  CONTAINER_STATE__FROZEN = 6,
  CONTAINER_STATE__ZOMBIE = 7,
  CONTAINER_STATE__SHUTDOWN = 8,
  CONTAINER_STATE__SETUP = 9
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CONTAINER_STATE)
} ContainerState;
/*
 **
 * Must be kept in sync with definition in container.h!
 */
typedef enum _ContainerConnectivity {
  CONTAINER_CONNECTIVITY__OFFLINE = 1,
  CONTAINER_CONNECTIVITY__MOBILE_ONLY = 2,
  CONTAINER_CONNECTIVITY__WIFI_ONLY = 3,
  CONTAINER_CONNECTIVITY__MOBILE_AND_WIFI = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CONTAINER_CONNECTIVITY)
} ContainerConnectivity;

/* --- messages --- */

struct  _ContainerImageSize
{
  ProtobufCMessage base;
  /*
   * virtual name of the image file in guestos
   */
  char *image_name;
  /*
   * size (bytes) of the image file
   */
  uint64_t image_size;
  /*
   * name of alternat image file which overwrites image_name of guestos config
   */
  char *image_file;
};
#define CONTAINER_IMAGE_SIZE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&container_image_size__descriptor) \
    , NULL, 0, NULL }


struct  _ContainerConfig
{
  ProtobufCMessage base;
  /*
   * user configurable, non unique
   */
  char *name;
  /*
   * name of GuestOS, e.g. android
   */
  char *guest_os;
  /*
   * (minimal) version of GuestOS; will be updated if container is started with a more recent GuestOS version.
   */
  protobuf_c_boolean has_guestos_version;
  uint64_t guestos_version;
  /*
   * complete image sizes from GuestOS for user partitions
   */
  size_t n_image_sizes;
  ContainerImageSize **image_sizes;
  /*
   * unit = MBytes
   */
  protobuf_c_boolean has_ram_limit;
  uint32_t ram_limit;
  uint32_t color;
  /*
   * type of container, e.g. KVM or CONTAINER
   */
  ContainerType type;
  /*
   * Flags indicating the allows for containers:
   */
  /*
   * TODO: add further features as necessary
   */
  protobuf_c_boolean has_allow_autostart;
  protobuf_c_boolean allow_autostart;
  /*
   * a list of strings wich contain the features image prefix name without .img
   */
  size_t n_feature_enabled;
  char **feature_enabled;
  char *dns_server;
  protobuf_c_boolean has_netns;
  protobuf_c_boolean netns;
  /*
   * a list of network interfaces assigned to this container
   */
  size_t n_net_ifaces;
  char **net_ifaces;
  /*
   * a list of devices explicitely allowed for this container
   */
  size_t n_allow_dev;
  char **allow_dev;
  /*
   * a list of devices exclusively assigned to this container
   */
  size_t n_assign_dev;
  char **assign_dev;
};
#define CONTAINER_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&container_config__descriptor) \
    , NULL, NULL, 0,0, 0,NULL, 0,1024u, 0, CONTAINER_TYPE__CONTAINER, 0,0, 0,NULL, NULL, 0,1, 0,NULL, 0,NULL, 0,NULL }


/*
 **
 * Represents the status of a single container.
 */
struct  _ContainerStatus
{
  ProtobufCMessage base;
  char *uuid;
  char *name;
  ContainerType type;
  ContainerState state;
  uint64_t uptime;
  /*
   * TBD more state values 
   */
  uint64_t created;
};
#define CONTAINER_STATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&container_status__descriptor) \
    , NULL, NULL, 0, 0, 0, 0 }


/* ContainerImageSize methods */
void   container_image_size__init
                     (ContainerImageSize         *message);
size_t container_image_size__get_packed_size
                     (const ContainerImageSize   *message);
size_t container_image_size__pack
                     (const ContainerImageSize   *message,
                      uint8_t             *out);
size_t container_image_size__pack_to_buffer
                     (const ContainerImageSize   *message,
                      ProtobufCBuffer     *buffer);
ContainerImageSize *
       container_image_size__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   container_image_size__free_unpacked
                     (ContainerImageSize *message,
                      ProtobufCAllocator *allocator);
/* ContainerConfig methods */
void   container_config__init
                     (ContainerConfig         *message);
size_t container_config__get_packed_size
                     (const ContainerConfig   *message);
size_t container_config__pack
                     (const ContainerConfig   *message,
                      uint8_t             *out);
size_t container_config__pack_to_buffer
                     (const ContainerConfig   *message,
                      ProtobufCBuffer     *buffer);
ContainerConfig *
       container_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   container_config__free_unpacked
                     (ContainerConfig *message,
                      ProtobufCAllocator *allocator);
/* ContainerStatus methods */
void   container_status__init
                     (ContainerStatus         *message);
size_t container_status__get_packed_size
                     (const ContainerStatus   *message);
size_t container_status__pack
                     (const ContainerStatus   *message,
                      uint8_t             *out);
size_t container_status__pack_to_buffer
                     (const ContainerStatus   *message,
                      ProtobufCBuffer     *buffer);
ContainerStatus *
       container_status__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   container_status__free_unpacked
                     (ContainerStatus *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*ContainerImageSize_Closure)
                 (const ContainerImageSize *message,
                  void *closure_data);
typedef void (*ContainerConfig_Closure)
                 (const ContainerConfig *message,
                  void *closure_data);
typedef void (*ContainerStatus_Closure)
                 (const ContainerStatus *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    container_type__descriptor;
extern const ProtobufCEnumDescriptor    container_state__descriptor;
extern const ProtobufCEnumDescriptor    container_connectivity__descriptor;
extern const ProtobufCMessageDescriptor container_image_size__descriptor;
extern const ProtobufCMessageDescriptor container_config__descriptor;
extern const ProtobufCMessageDescriptor container_status__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_container_2eproto__INCLUDED */
