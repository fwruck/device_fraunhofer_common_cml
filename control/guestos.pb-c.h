/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: guestos.proto */

#ifndef PROTOBUF_C_guestos_2eproto__INCLUDED
#define PROTOBUF_C_guestos_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _I18NString I18NString;
typedef struct _GuestOSMount GuestOSMount;
typedef struct _GuestOSConfig GuestOSConfig;


/* --- enums --- */

typedef enum _GuestOSMount__Type {
  /*
   * image shared by all containers of same OS type
   */
  GUEST_OSMOUNT__TYPE__SHARED = 1,
  /*
   * image file is copied from a device partition
   */
  GUEST_OSMOUNT__TYPE__DEVICE = 2,
  /*
   * image file is copied from a device partition
   */
  GUEST_OSMOUNT__TYPE__DEVICE_RW = 3,
  /*
   * empty, created when a corresponding container is first instantiated
   */
  GUEST_OSMOUNT__TYPE__EMPTY = 4,
  /*
   * deprecated
   */
  GUEST_OSMOUNT__TYPE__COPY = 5,
  /*
   * image to be flashed to a partition (e.g. boot.img; base system updates only for now)
   */
  GUEST_OSMOUNT__TYPE__FLASH = 6,
  /*
   * image shared between different containers and OSs
   */
  GUEST_OSMOUNT__TYPE__SHARED_DATA = 7,
  /*
   * read only overlay images e.g. for system features
   */
  GUEST_OSMOUNT__TYPE__OVERLAY_RO = 8,
  /*
   * image shared by all containers of same OS type (writable tmpfs as overlay)
   */
  GUEST_OSMOUNT__TYPE__SHARED_RW = 9,
  /*
   * image shared by all containers of same OS type (writable persitent fs per container as overlay)
   */
  GUEST_OSMOUNT__TYPE__OVERLAY_RW = 10
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(GUEST_OSMOUNT__TYPE)
} GuestOSMount__Type;

/* --- messages --- */

/*
 * (English) string with optional translations in other languages
 */
struct  _I18NString
{
  ProtobufCMessage base;
  char *en;
  char *de;
  /*
   * TODO: add other languages as necessary...
   */
  char *fr;
};
#define I18_NSTRING__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&i18_nstring__descriptor) \
    , NULL, NULL, NULL }


/*
 * Represents a single mount point/image provided by the GuestOS
 */
struct  _GuestOSMount
{
  ProtobufCMessage base;
  /*
   * Path for the image files is derived from guestos_path/guestos_name.
   */
  /*
   * name of the image file, e.g. system
   */
  char *image_file;
  /*
   * mountpoint inside the container
   */
  char *mount_point;
  /*
   * file system type, e.g. "ext4"
   */
  char *fs_type;
  /*
   * type of the image file
   */
  GuestOSMount__Type mount_type;
  /*
   * The following three fields are only used for EMPTY mount types:
   */
  /*
   * required minimum size (MBytes) for EMPTY partition
   */
  protobuf_c_boolean has_min_size;
  uint32_t min_size;
  /*
   * allowed maximum size (MBytes) for EMPTY partition
   */
  protobuf_c_boolean has_max_size;
  uint32_t max_size;
  /*
   * default size (MBytes) for EMPTY partition
   */
  protobuf_c_boolean has_def_size;
  uint32_t def_size;
  /*
   * The following two fields are only used when an actual image file is provided:
   */
  /*
   * size (bytes) of the image
   */
  protobuf_c_boolean has_image_size;
  uint64_t image_size;
  /*
   * hash(es) of image file
   */
  char *image_sha1;
  /*
   * TODO add further hashes as necessary
   */
  char *image_sha2_256;
  /*
   * mount_data used for mount syscall, e.g. "context=" for selinux
   */
  char *mount_data;
  /*
   * size (MBytes) of the additional data image in case of OVERLAY_RW
   */
  protobuf_c_boolean has_data_size;
  uint64_t data_size;
};
#define GUEST_OSMOUNT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&guest_osmount__descriptor) \
    , NULL, NULL, NULL, 0, 0,10u, 0,16384u, 0,1024u, 0,0, NULL, NULL, NULL, 0,0 }


struct  _GuestOSConfig
{
  ProtobufCMessage base;
  /*
   * The following three fields together should UNIQUELY identify the actual guestos image files and config:
   */
  /*
   * unique name of the operating system
   */
  char *name;
  /*
   * target hardware; must match hardware_get_name(), e.g. "i9505", etc.
   */
  char *hardware;
  /*
   * TODO version string OR major.minor-suffix? ("RC1", "beta", etc.)
   */
  /*
   * version string for the guest OS
   */
  uint64_t version;
  /*
   * list of mounts inside the container
   */
  size_t n_mounts;
  GuestOSMount **mounts;
  /*
   * path to the init binary, e.g. "/init"
   */
  char *init_path;
  /*
   * parameters (argv) for init
   */
  size_t n_init_param;
  char **init_param;
  /*
   * environment variables
   */
  size_t n_init_env;
  char **init_env;
  /*
   * list of mounts for setup mode of a container
   */
  size_t n_mounts_setup;
  GuestOSMount **mounts_setup;
  /*
   * Flags indicating the features supported by the OS:
   */
  protobuf_c_boolean has_feature_phone;
  protobuf_c_boolean feature_phone;
  protobuf_c_boolean has_feature_bluetooth;
  protobuf_c_boolean feature_bluetooth;
  protobuf_c_boolean has_feature_wifi;
  protobuf_c_boolean feature_wifi;
  protobuf_c_boolean has_feature_mobile_data;
  protobuf_c_boolean feature_mobile_data;
  protobuf_c_boolean has_feature_sensors;
  protobuf_c_boolean feature_sensors;
  protobuf_c_boolean has_feature_camera;
  protobuf_c_boolean feature_camera;
  protobuf_c_boolean has_feature_audio;
  protobuf_c_boolean feature_audio;
  protobuf_c_boolean has_feature_bg_booting;
  protobuf_c_boolean feature_bg_booting;
  protobuf_c_boolean has_feature_vpn;
  protobuf_c_boolean feature_vpn;
  /*
   * TODO: add further features as necessary
   */
  protobuf_c_boolean has_feature_devtmpfs;
  protobuf_c_boolean feature_devtmpfs;
  /*
   * TODO: Determine RAM limit policy...
   */
  /*
   * required minimum RAM size (MBytes)
   */
  protobuf_c_boolean has_min_ram_limit;
  uint32_t min_ram_limit;
  /*
   * default RAM size (MBytes)
   */
  protobuf_c_boolean has_def_ram_limit;
  uint32_t def_ram_limit;
  /*
   * Descriptive information (for GUI):
   */
  /*
   * description/full name
   */
  I18NString *description;
  /*
   * help text
   */
  I18NString *description_long;
  /*
   * upstream version
   */
  char *upstream_version;
  /*
   * name of icon file
   */
  protobuf_c_boolean has_icon;
  ProtobufCBinaryData icon;
  /*
   * build date
   */
  char *build_date;
};
extern char guest_osconfig__init_path__default_value[];
#define GUEST_OSCONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&guest_osconfig__descriptor) \
    , NULL, NULL, 0, 0,NULL, guest_osconfig__init_path__default_value, 0,NULL, 0,NULL, 0,NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,128u, 0,1024u, NULL, NULL, NULL, 0,{0,NULL}, NULL }


/* I18NString methods */
void   i18_nstring__init
                     (I18NString         *message);
size_t i18_nstring__get_packed_size
                     (const I18NString   *message);
size_t i18_nstring__pack
                     (const I18NString   *message,
                      uint8_t             *out);
size_t i18_nstring__pack_to_buffer
                     (const I18NString   *message,
                      ProtobufCBuffer     *buffer);
I18NString *
       i18_nstring__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   i18_nstring__free_unpacked
                     (I18NString *message,
                      ProtobufCAllocator *allocator);
/* GuestOSMount methods */
void   guest_osmount__init
                     (GuestOSMount         *message);
size_t guest_osmount__get_packed_size
                     (const GuestOSMount   *message);
size_t guest_osmount__pack
                     (const GuestOSMount   *message,
                      uint8_t             *out);
size_t guest_osmount__pack_to_buffer
                     (const GuestOSMount   *message,
                      ProtobufCBuffer     *buffer);
GuestOSMount *
       guest_osmount__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   guest_osmount__free_unpacked
                     (GuestOSMount *message,
                      ProtobufCAllocator *allocator);
/* GuestOSConfig methods */
void   guest_osconfig__init
                     (GuestOSConfig         *message);
size_t guest_osconfig__get_packed_size
                     (const GuestOSConfig   *message);
size_t guest_osconfig__pack
                     (const GuestOSConfig   *message,
                      uint8_t             *out);
size_t guest_osconfig__pack_to_buffer
                     (const GuestOSConfig   *message,
                      ProtobufCBuffer     *buffer);
GuestOSConfig *
       guest_osconfig__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   guest_osconfig__free_unpacked
                     (GuestOSConfig *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*I18NString_Closure)
                 (const I18NString *message,
                  void *closure_data);
typedef void (*GuestOSMount_Closure)
                 (const GuestOSMount *message,
                  void *closure_data);
typedef void (*GuestOSConfig_Closure)
                 (const GuestOSConfig *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor i18_nstring__descriptor;
extern const ProtobufCMessageDescriptor guest_osmount__descriptor;
extern const ProtobufCEnumDescriptor    guest_osmount__type__descriptor;
extern const ProtobufCMessageDescriptor guest_osconfig__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_guestos_2eproto__INCLUDED */
