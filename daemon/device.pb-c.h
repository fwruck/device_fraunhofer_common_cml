/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: device.proto */

#ifndef PROTOBUF_C_device_2eproto__INCLUDED
#define PROTOBUF_C_device_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _DeviceConfig DeviceConfig;


/* --- enums --- */


/* --- messages --- */

struct  _DeviceConfig
{
  ProtobufCMessage base;
  /*
   * unique uuid. may change due to user change.
   * may be generated if no uuid is available.
   */
  char *uuid;
  /*
   * IP and port of backend (MDM)
   */
  char *mdm_node;
  char *mdm_service;
  /*
   * UUID of the container receiving phone calls (TODO currently unused)
   */
  char *telephony_uuid;
  /*
   * base url for fetching updates (image files, etc.)
   */
  /*
   * e.g. http://server:port/trustme/operatingsystems/<device>/<name>-<version>/<filename.img>
   */
  char *update_base_url;
  /*
   * flag which decides led blinking
   */
  protobuf_c_boolean has_should_led_blink;
  protobuf_c_boolean should_led_blink;
  /*
   * configure os if the management container
   */
  char *c0os;
  /*
   * configure network
   */
  char *host_addr;
  protobuf_c_boolean has_host_subnet;
  uint32_t host_subnet;
  char *host_if;
  char *host_gateway;
  char *host_dns;
};
extern char device_config__c0os__default_value[];
extern char device_config__host_addr__default_value[];
extern char device_config__host_if__default_value[];
extern char device_config__host_gateway__default_value[];
extern char device_config__host_dns__default_value[];
#define DEVICE_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&device_config__descriptor) \
    , NULL, NULL, NULL, NULL, NULL, 0,0, device_config__c0os__default_value, device_config__host_addr__default_value, 0,0u, device_config__host_if__default_value, device_config__host_gateway__default_value, device_config__host_dns__default_value }


/* DeviceConfig methods */
void   device_config__init
                     (DeviceConfig         *message);
size_t device_config__get_packed_size
                     (const DeviceConfig   *message);
size_t device_config__pack
                     (const DeviceConfig   *message,
                      uint8_t             *out);
size_t device_config__pack_to_buffer
                     (const DeviceConfig   *message,
                      ProtobufCBuffer     *buffer);
DeviceConfig *
       device_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   device_config__free_unpacked
                     (DeviceConfig *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*DeviceConfig_Closure)
                 (const DeviceConfig *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor device_config__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_device_2eproto__INCLUDED */
