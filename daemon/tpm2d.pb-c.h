/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: tpm2d.proto */

#ifndef PROTOBUF_C_tpm2d_2eproto__INCLUDED
#define PROTOBUF_C_tpm2d_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Pcr Pcr;
typedef struct _ControllerToTpm ControllerToTpm;
typedef struct _TpmToController TpmToController;


/* --- enums --- */

typedef enum _ControllerToTpm__Code {
  CONTROLLER_TO_TPM__CODE__INTERNAL_ATTESTATION_REQ = 1,
  CONTROLLER_TO_TPM__CODE__DMCRYPT_SETUP = 2,
  CONTROLLER_TO_TPM__CODE__EXIT = 3,
  CONTROLLER_TO_TPM__CODE__RANDOM_REQ = 4,
  CONTROLLER_TO_TPM__CODE__CLEAR = 5,
  CONTROLLER_TO_TPM__CODE__DMCRYPT_LOCK = 6,
  CONTROLLER_TO_TPM__CODE__CHANGE_OWNER_PWD = 7,
  CONTROLLER_TO_TPM__CODE__DMCRYPT_RESET = 8,
  CONTROLLER_TO_TPM__CODE__ML_APPEND = 9
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CONTROLLER_TO_TPM__CODE)
} ControllerToTpm__Code;
typedef enum _TpmToController__Code {
  TPM_TO_CONTROLLER__CODE__INTERNAL_ATTESTATION_RES = 1,
  /*
   * -> [response]
   */
  TPM_TO_CONTROLLER__CODE__GENERIC_RESPONSE = 2,
  TPM_TO_CONTROLLER__CODE__FDE_RESPONSE = 3,
  TPM_TO_CONTROLLER__CODE__RANDOM_RESPONSE = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TPM_TO_CONTROLLER__CODE)
} TpmToController__Code;
typedef enum _TpmToController__GenericResponse {
  TPM_TO_CONTROLLER__GENERIC_RESPONSE__CMD_OK = 1,
  TPM_TO_CONTROLLER__GENERIC_RESPONSE__CMD_FAILED = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TPM_TO_CONTROLLER__GENERIC_RESPONSE)
} TpmToController__GenericResponse;
typedef enum _TpmToController__FdeResponse {
  TPM_TO_CONTROLLER__FDE_RESPONSE__FDE_OK = 1,
  TPM_TO_CONTROLLER__FDE_RESPONSE__FDE_AUTH_FAILED = 2,
  TPM_TO_CONTROLLER__FDE_RESPONSE__FDE_KEYGEN_FAILED = 3,
  TPM_TO_CONTROLLER__FDE_RESPONSE__FDE_NO_DEVICE = 4,
  TPM_TO_CONTROLLER__FDE_RESPONSE__FDE_KEY_ACCESS_LOCKED = 5,
  TPM_TO_CONTROLLER__FDE_RESPONSE__FDE_RESET = 6,
  TPM_TO_CONTROLLER__FDE_RESPONSE__FDE_UNEXPECTED_ERROR = 7
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TPM_TO_CONTROLLER__FDE_RESPONSE)
} TpmToController__FdeResponse;
/*
 * type of attestation in the IDS context
 */
typedef enum _IdsAttestationType {
  /*
   * kernel + core container (PCR 0 to 10)
   */
  IDS_ATTESTATION_TYPE__BASIC = 0,
  /*
   * everything (PCRs 0 to 23)
   */
  IDS_ATTESTATION_TYPE__ALL = 1,
  /*
   * PCRs must be specified manually
   */
  IDS_ATTESTATION_TYPE__ADVANCED = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(IDS_ATTESTATION_TYPE)
} IdsAttestationType;
typedef enum _HashAlgLen {
  HASH_ALG_LEN__SHA1 = 20,
  HASH_ALG_LEN__SHA256 = 32,
  HASH_ALG_LEN__SHA384 = 48
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(HASH_ALG_LEN)
} HashAlgLen;

/* --- messages --- */

struct  _Pcr
{
  ProtobufCMessage base;
  /*
   * the PCR number (usually between 0 and 23)
   */
  protobuf_c_boolean has_number;
  int32_t number;
  /*
   * the value of PCR<number>
   */
  char *value;
};
#define PCR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pcr__descriptor) \
    , 0,0, NULL }


struct  _ControllerToTpm
{
  ProtobufCMessage base;
  ControllerToTpm__Code code;
  /*
   * type of attestation in the IDS context
   */
  protobuf_c_boolean has_atype;
  IdsAttestationType atype;
  /*
   * qualifingData (i.e. external data provided by the caller, such as a nonce)
   */
  char *qualifyingdata;
  /*
   * pcr bitmask for AttestationType ADVANCED only
   *  - for BASIC, the default PCRs are PCRs 0 to 11
   *  - for ALL  , the default PCRs are PCRs 0 to 23
   */
  protobuf_c_boolean has_pcrs;
  int32_t pcrs;
  /*
   * if command FDE_DM_SETUP this is the blk device which is used
   * as pysical device for the mapping
   */
  char *dmcrypt_device;
  /*
   * passphrase for for command, e.g., nv index auth of tpm
   */
  char *password;
  /*
   * amount of random data requested
   */
  protobuf_c_boolean has_rand_size;
  int32_t rand_size;
  /*
   * new passphrase for auth changing commands, e.g., change owner auth of tpm
   */
  char *password_new;
  /*
   * file to be measured, e.g., the container readonly filesystem images
   */
  char *ml_filename;
  protobuf_c_boolean has_ml_datahash;
  ProtobufCBinaryData ml_datahash;
  protobuf_c_boolean has_ml_hashalg;
  HashAlgLen ml_hashalg;
};
#define CONTROLLER_TO_TPM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&controller_to_tpm__descriptor) \
    , 0, 0,IDS_ATTESTATION_TYPE__BASIC, NULL, 0,0, NULL, NULL, 0,0, NULL, NULL, 0,{0,NULL}, 0,0 }


struct  _TpmToController
{
  ProtobufCMessage base;
  TpmToController__Code code;
  /*
   * type of attestation in the IDS context
   */
  protobuf_c_boolean has_atype;
  IdsAttestationType atype;
  /*
   * the hash algorith used to sign the quoted information
   */
  char *halg;
  /*
   * the quoted information (a TPM2B_ATTEST data structure)
   */
  char *quoted;
  /*
   * the signature over 'quoted' (a TPMT_SIGNATURE data structure)
   */
  char *signature;
  /*
   * the explicit PCR values
   */
  size_t n_pcr_values;
  Pcr **pcr_values;
  /*
   * an _optional_ URI to a certificate that includes the public key
   */
  char *certificate_uri;
  protobuf_c_boolean has_response;
  TpmToController__GenericResponse response;
  protobuf_c_boolean has_fde_response;
  TpmToController__FdeResponse fde_response;
  char *rand_data;
  /*
   * the measurement list in ima style hex strings
   */
  size_t n_ml_entry;
  char **ml_entry;
};
#define TPM_TO_CONTROLLER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tpm_to_controller__descriptor) \
    , 0, 0,IDS_ATTESTATION_TYPE__BASIC, NULL, NULL, NULL, 0,NULL, NULL, 0,0, 0,0, NULL, 0,NULL }


/* Pcr methods */
void   pcr__init
                     (Pcr         *message);
size_t pcr__get_packed_size
                     (const Pcr   *message);
size_t pcr__pack
                     (const Pcr   *message,
                      uint8_t             *out);
size_t pcr__pack_to_buffer
                     (const Pcr   *message,
                      ProtobufCBuffer     *buffer);
Pcr *
       pcr__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pcr__free_unpacked
                     (Pcr *message,
                      ProtobufCAllocator *allocator);
/* ControllerToTpm methods */
void   controller_to_tpm__init
                     (ControllerToTpm         *message);
size_t controller_to_tpm__get_packed_size
                     (const ControllerToTpm   *message);
size_t controller_to_tpm__pack
                     (const ControllerToTpm   *message,
                      uint8_t             *out);
size_t controller_to_tpm__pack_to_buffer
                     (const ControllerToTpm   *message,
                      ProtobufCBuffer     *buffer);
ControllerToTpm *
       controller_to_tpm__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   controller_to_tpm__free_unpacked
                     (ControllerToTpm *message,
                      ProtobufCAllocator *allocator);
/* TpmToController methods */
void   tpm_to_controller__init
                     (TpmToController         *message);
size_t tpm_to_controller__get_packed_size
                     (const TpmToController   *message);
size_t tpm_to_controller__pack
                     (const TpmToController   *message,
                      uint8_t             *out);
size_t tpm_to_controller__pack_to_buffer
                     (const TpmToController   *message,
                      ProtobufCBuffer     *buffer);
TpmToController *
       tpm_to_controller__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tpm_to_controller__free_unpacked
                     (TpmToController *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Pcr_Closure)
                 (const Pcr *message,
                  void *closure_data);
typedef void (*ControllerToTpm_Closure)
                 (const ControllerToTpm *message,
                  void *closure_data);
typedef void (*TpmToController_Closure)
                 (const TpmToController *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    ids_attestation_type__descriptor;
extern const ProtobufCEnumDescriptor    hash_alg_len__descriptor;
extern const ProtobufCMessageDescriptor pcr__descriptor;
extern const ProtobufCMessageDescriptor controller_to_tpm__descriptor;
extern const ProtobufCEnumDescriptor    controller_to_tpm__code__descriptor;
extern const ProtobufCMessageDescriptor tpm_to_controller__descriptor;
extern const ProtobufCEnumDescriptor    tpm_to_controller__code__descriptor;
extern const ProtobufCEnumDescriptor    tpm_to_controller__generic_response__descriptor;
extern const ProtobufCEnumDescriptor    tpm_to_controller__fde_response__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_tpm2d_2eproto__INCLUDED */
