/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: c_service.proto */

#ifndef PROTOBUF_C_c_5fservice_2eproto__INCLUDED
#define PROTOBUF_C_c_5fservice_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "container.pb-c.h"

typedef struct _CmldToServiceMessage CmldToServiceMessage;
typedef struct _ServiceToCmldMessage ServiceToCmldMessage;


/* --- enums --- */

typedef enum _CmldToServiceMessage__Code {
  CMLD_TO_SERVICE_MESSAGE__CODE__SHUTDOWN = 1,
  CMLD_TO_SERVICE_MESSAGE__CODE__SUSPEND = 2,
  CMLD_TO_SERVICE_MESSAGE__CODE__RESUME = 3,
  CMLD_TO_SERVICE_MESSAGE__CODE__AUDIO_SUSPEND = 5,
  CMLD_TO_SERVICE_MESSAGE__CODE__AUDIO_RESUME = 6,
  CMLD_TO_SERVICE_MESSAGE__CODE__CONNECTIVITY_CHANGE = 14,
  CMLD_TO_SERVICE_MESSAGE__CODE__AIRPLANE_MODE_CHANGED = 15,
  CMLD_TO_SERVICE_MESSAGE__CODE__WIFI_USER_ENABLED_CHANGED = 16,
  CMLD_TO_SERVICE_MESSAGE__CODE__CONTAINER_CFG_NAME = 17,
  CMLD_TO_SERVICE_MESSAGE__CODE__CONTAINER_CFG_DNS = 18
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CMLD_TO_SERVICE_MESSAGE__CODE)
} CmldToServiceMessage__Code;
typedef enum _ServiceToCmldMessage__Code {
  SERVICE_TO_CMLD_MESSAGE__CODE__BOOT_COMPLETED = 1,
  SERVICE_TO_CMLD_MESSAGE__CODE__SUSPEND_COMPLETED = 2,
  SERVICE_TO_CMLD_MESSAGE__CODE__RESUME_COMPLETED = 3,
  SERVICE_TO_CMLD_MESSAGE__CODE__AUDIO_SUSPEND_COMPLETED = 5,
  SERVICE_TO_CMLD_MESSAGE__CODE__AUDIO_RESUME_COMPLETED = 6,
  SERVICE_TO_CMLD_MESSAGE__CODE__CALL_ACTIVE = 7,
  SERVICE_TO_CMLD_MESSAGE__CODE__CALL_HANGUP = 8,
  SERVICE_TO_CMLD_MESSAGE__CODE__SHUTDOWN = 10,
  SERVICE_TO_CMLD_MESSAGE__CODE__MASTER_CLEAR = 11,
  SERVICE_TO_CMLD_MESSAGE__CODE__SWITCH_CONTAINER = 13,
  SERVICE_TO_CMLD_MESSAGE__CODE__CONNECTIVITY_CHANGE = 14,
  SERVICE_TO_CMLD_MESSAGE__CODE__IMEI_MAC_PHONENO = 15,
  SERVICE_TO_CMLD_MESSAGE__CODE__AIRPLANE_MODE_CHANGED = 16,
  SERVICE_TO_CMLD_MESSAGE__CODE__WIFI_USER_ENABLED_CHANGED = 17,
  SERVICE_TO_CMLD_MESSAGE__CODE__CONTAINER_CFG_NAME_REQ = 18,
  SERVICE_TO_CMLD_MESSAGE__CODE__CONTAINER_CFG_DNS_REQ = 19
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SERVICE_TO_CMLD_MESSAGE__CODE)
} ServiceToCmldMessage__Code;

/* --- messages --- */

struct  _CmldToServiceMessage
{
  ProtobufCMessage base;
  CmldToServiceMessage__Code code;
  protobuf_c_boolean has_connectivity;
  ContainerConnectivity connectivity;
  char *source_id;
  char *source_color;
  protobuf_c_boolean has_airplane_mode;
  protobuf_c_boolean airplane_mode;
  protobuf_c_boolean has_wifi_user_enabled;
  protobuf_c_boolean wifi_user_enabled;
  char *container_cfg_name;
  char *container_cfg_dns;
};
#define CMLD_TO_SERVICE_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmld_to_service_message__descriptor) \
    , 0, 0,CONTAINER_CONNECTIVITY__OFFLINE, NULL, NULL, 0,0, 0,0, NULL, NULL }


struct  _ServiceToCmldMessage
{
  ProtobufCMessage base;
  ServiceToCmldMessage__Code code;
  /*
   *optional bytes wallpaper_data = 4;
   */
  protobuf_c_boolean has_connectivity;
  ContainerConnectivity connectivity;
  char *imei;
  char *mac;
  char *phonenumber;
  protobuf_c_boolean has_airplane_mode;
  protobuf_c_boolean airplane_mode;
  char *target_container;
  protobuf_c_boolean has_wifi_user_enabled;
  protobuf_c_boolean wifi_user_enabled;
};
#define SERVICE_TO_CMLD_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&service_to_cmld_message__descriptor) \
    , 0, 0,CONTAINER_CONNECTIVITY__OFFLINE, NULL, NULL, NULL, 0,0, NULL, 0,0 }


/* CmldToServiceMessage methods */
void   cmld_to_service_message__init
                     (CmldToServiceMessage         *message);
size_t cmld_to_service_message__get_packed_size
                     (const CmldToServiceMessage   *message);
size_t cmld_to_service_message__pack
                     (const CmldToServiceMessage   *message,
                      uint8_t             *out);
size_t cmld_to_service_message__pack_to_buffer
                     (const CmldToServiceMessage   *message,
                      ProtobufCBuffer     *buffer);
CmldToServiceMessage *
       cmld_to_service_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmld_to_service_message__free_unpacked
                     (CmldToServiceMessage *message,
                      ProtobufCAllocator *allocator);
/* ServiceToCmldMessage methods */
void   service_to_cmld_message__init
                     (ServiceToCmldMessage         *message);
size_t service_to_cmld_message__get_packed_size
                     (const ServiceToCmldMessage   *message);
size_t service_to_cmld_message__pack
                     (const ServiceToCmldMessage   *message,
                      uint8_t             *out);
size_t service_to_cmld_message__pack_to_buffer
                     (const ServiceToCmldMessage   *message,
                      ProtobufCBuffer     *buffer);
ServiceToCmldMessage *
       service_to_cmld_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   service_to_cmld_message__free_unpacked
                     (ServiceToCmldMessage *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*CmldToServiceMessage_Closure)
                 (const CmldToServiceMessage *message,
                  void *closure_data);
typedef void (*ServiceToCmldMessage_Closure)
                 (const ServiceToCmldMessage *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor cmld_to_service_message__descriptor;
extern const ProtobufCEnumDescriptor    cmld_to_service_message__code__descriptor;
extern const ProtobufCMessageDescriptor service_to_cmld_message__descriptor;
extern const ProtobufCEnumDescriptor    service_to_cmld_message__code__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_c_5fservice_2eproto__INCLUDED */
